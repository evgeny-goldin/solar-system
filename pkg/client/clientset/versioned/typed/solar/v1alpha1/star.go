/*
 Copyright 2020 The Knative Authors

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/
// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
	v1alpha1 "solar-system/pkg/apis/solar/v1alpha1"
	scheme "solar-system/pkg/client/clientset/versioned/scheme"
)

// StarsGetter has a method to return a StarInterface.
// A group's client should implement this interface.
type StarsGetter interface {
	Stars(namespace string) StarInterface
}

// StarInterface has methods to work with Star resources.
type StarInterface interface {
	Create(*v1alpha1.Star) (*v1alpha1.Star, error)
	Update(*v1alpha1.Star) (*v1alpha1.Star, error)
	UpdateStatus(*v1alpha1.Star) (*v1alpha1.Star, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.Star, error)
	List(opts v1.ListOptions) (*v1alpha1.StarList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Star, err error)
	StarExpansion
}

// stars implements StarInterface
type stars struct {
	client rest.Interface
	ns     string
}

// newStars returns a Stars
func newStars(c *ExampleV1alpha1Client, namespace string) *stars {
	return &stars{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the star, and returns the corresponding star object, and an error if there is any.
func (c *stars) Get(name string, options v1.GetOptions) (result *v1alpha1.Star, err error) {
	result = &v1alpha1.Star{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("stars").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(context.Background()).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Stars that match those selectors.
func (c *stars) List(opts v1.ListOptions) (result *v1alpha1.StarList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.StarList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("stars").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(context.Background()).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested stars.
func (c *stars) Watch(opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("stars").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(context.Background())
}

// Create takes the representation of a star and creates it.  Returns the server's representation of the star, and an error, if there is any.
func (c *stars) Create(star *v1alpha1.Star) (result *v1alpha1.Star, err error) {
	result = &v1alpha1.Star{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("stars").
		Body(star).
		Do(context.Background()).
		Into(result)
	return
}

// Update takes the representation of a star and updates it. Returns the server's representation of the star, and an error, if there is any.
func (c *stars) Update(star *v1alpha1.Star) (result *v1alpha1.Star, err error) {
	result = &v1alpha1.Star{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("stars").
		Name(star.Name).
		Body(star).
		Do(context.Background()).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *stars) UpdateStatus(star *v1alpha1.Star) (result *v1alpha1.Star, err error) {
	result = &v1alpha1.Star{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("stars").
		Name(star.Name).
		SubResource("status").
		Body(star).
		Do(context.Background()).
		Into(result)
	return
}

// Delete takes name of the star and deletes it. Returns an error if one occurs.
func (c *stars) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("stars").
		Name(name).
		Body(options).
		Do(context.Background()).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *stars) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("stars").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do(context.Background()).
		Error()
}

// Patch applies the patch and returns the patched star.
func (c *stars) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Star, err error) {
	result = &v1alpha1.Star{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("stars").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do(context.Background()).
		Into(result)
	return
}
